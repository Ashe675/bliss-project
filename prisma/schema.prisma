// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OfficeType {
  barbershop
  salon
}

model BranchOffice {
  id            String     @id @default(uuid()) @db.Char(36)
  name          String     @db.VarChar(100)
  description   String     @db.VarChar(300)
  address       String     @db.VarChar(250)
  rating        Int?
  longevityYear Int
  registerDate  DateTime   @default(now())
  userOwnerId   String     @db.Char(36)
  userOwner     User       @relation("userOwner", fields: [userOwnerId], references: [id])
  slug          String     @unique @db.VarChar(120)
  officeType    OfficeType
  employees     User[]     @relation("UserBranchOffice")
  services      Service[]
  images        Image[]
}

enum ImageType {
  branch
  post
}

model Image {
  id             String        @id @default(uuid()) @db.Char(36)
  url            String        @db.VarChar(200)
  publicId       String        @db.VarChar(200)
  imageType      ImageType
  branchOffice   BranchOffice? @relation(fields: [branchOfficeId], references: [id])
  branchOfficeId String?       @db.Char(36)
  post           Post?         @relation(fields: [postId], references: [id])
  postId         String?       @db.Char(36)
}

enum Role {
  user
  admin
  employee
}

model User {
  id                    String            @id @default(uuid()) @db.Char(36)
  firstName             String            @db.VarChar(60)
  lastName              String            @db.VarChar(60)
  user                  String            @unique @db.VarChar(70)
  email                 String?           @db.VarChar(80)
  password              String            @db.VarChar(80)
  verified              Boolean           @default(false)
  profileImage          String?           @db.VarChar(45)
  isActive              Boolean?          @default(true)
  description           String?           @db.VarChar(250)
  phoneNumber           String?
  branchOffice          BranchOffice?     @relation("UserBranchOffice", fields: [branchOfficeId], references: [id])
  branchOfficeId        String?           @db.Char(36)
  role                  Role              @default(user)
  reviewsGiven          Review[]          @relation("Reviewer")
  reviewsReceived       Review[]          @relation("Reviewee")
  posts                 Post[]
  userSuscriptions      UserSuscription[]
  appointmentsScheduled Appointment[]     @relation("UserScheduler")
  appointmentsReceived  Appointment[]     @relation("UserScheduled")
  branchOffices         BranchOffice[]    @relation("userOwner")

  @@index([email, user])
}

model Suscription {
  id                  String               @id @default(uuid()) @db.Char(36)
  name                String               @db.VarChar(85)
  duration            Int
  userSuscriptions    UserSuscription[]
  benefitSuscriptions BenefitSuscription[]
}

model UserSuscription {
  id            String      @id @default(uuid()) @db.Char(36)
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.Char(36)
  suscription   Suscription @relation(fields: [suscriptionId], references: [id])
  suscriptionId String      @db.Char(36)
  initialDate   DateTime    @default(now())
  finalDate     DateTime    @db.Date
}

model Benefit {
  id                  String               @id @default(uuid()) @db.Char(36)
  name                String               @db.VarChar(60)
  description         String?              @db.VarChar(100)
  benefitSuscriptions BenefitSuscription[]
}

model BenefitSuscription {
  benefit       Benefit     @relation(fields: [benefitId], references: [id])
  benefitId     String      @db.Char(36)
  suscription   Suscription @relation(fields: [suscriptionId], references: [id])
  suscriptionId String      @db.Char(36)
  quantity      Int

  @@id([benefitId, suscriptionId])
}

model Review {
  id         String   @id @default(uuid()) @db.Char(36)
  raiting    Int
  comment    String?  @db.VarChar(250)
  date       DateTime @default(now())
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId String   @db.Char(36)
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  revieweeId String   @db.Char(36)
}

enum StatusAppointment {
  pending
  accepted
  declined
  canceled
}

model Appointment {
  id              String            @id @default(uuid()) @db.Char(36)
  appointmentDate DateTime
  status          StatusAppointment @default(pending)
  description     String            @db.VarChar(150)
  cancelMessage   String?           @db.VarChar(150)
  createdAt       DateTime          @default(now())
  userScheduler   User              @relation("UserScheduler", fields: [userSchedulerId], references: [id])
  userSchedulerId String            @db.Char(36)
  userScheduled   User              @relation("UserScheduled", fields: [userScheduledId], references: [id])
  userScheduledId String            @db.Char(36)
  finalDate       DateTime?
}

model Service {
  idService      String       @id @default(uuid()) @db.Char(36)
  name           String       @db.VarChar(150)
  price          Float
  branchOffice   BranchOffice @relation(fields: [branchOfficeId], references: [id])
  branchOfficeId String       @db.Char(36)
}

model Post {
  id        String   @id @default(uuid()) @db.Char(36)
  title     String   @db.VarChar(100)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Char(36)
  images    Image[]
  createdAt DateTime @default(now())
}





